{"ast":null,"code":"import * as constants from '../constant';\nexport default function subTodoListReducers(state = [], action) {\n  switch (action.type) {\n    case constants.FETCH_ALL_SUB_TODO:\n      return action.payload;\n\n    case constants.CREATE_SUB_TODO:\n      return state.concat(action.payload);\n\n    case constants.DELETE_SUB_TODO:\n      return state.filter(item => item.id !== action.payload);\n\n    case constants.UPDATE_SUB_TODO:\n      return state.map(item => {\n        if (item.id === action.payload.todoCategoryID) return { ...item,\n          ...action.payload.data\n        };else return item;\n      });\n\n    case constants.RESET_USER_INFO:\n      return [];\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/file project/OJT/TodoNew-Frontend/FrontEnd-Todo/frontend/src/Redux/reducers/subTodoListReducer.js"],"names":["constants","subTodoListReducers","state","action","type","FETCH_ALL_SUB_TODO","payload","CREATE_SUB_TODO","concat","DELETE_SUB_TODO","filter","item","id","UPDATE_SUB_TODO","map","todoCategoryID","data","RESET_USER_INFO"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AAGA,eAAe,SAASC,mBAAT,CAA6BC,KAAK,GAAE,EAApC,EAAwCC,MAAxC,EACf;AACI,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,SAAS,CAACK,kBAAf;AACI,aAAOF,MAAM,CAACG,OAAd;;AACJ,SAAKN,SAAS,CAACO,eAAf;AACI,aAAOL,KAAK,CAACM,MAAN,CAAaL,MAAM,CAACG,OAApB,CAAP;;AACJ,SAAKN,SAAS,CAACS,eAAf;AACI,aAAOP,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAxC,CAAP;;AACJ,SAAKN,SAAS,CAACa,eAAf;AACI,aAAOX,KAAK,CAACY,GAAN,CAAUH,IAAI,IAAI;AACrB,YAAIA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAP,CAAeS,cAA/B,EACI,OAAO,EAAE,GAAGJ,IAAL;AAAW,aAAGR,MAAM,CAACG,OAAP,CAAeU;AAA7B,SAAP,CADJ,KAGI,OAAOL,IAAP;AACP,OALM,CAAP;;AAMJ,SAAKX,SAAS,CAACiB,eAAf;AACI,aAAO,EAAP;;AACJ;AACI,aAAOf,KAAP;AAjBR;AAmBH","sourcesContent":["import * as constants from '../constant'\r\n\r\n\r\nexport default function subTodoListReducers(state =[], action)\r\n{\r\n    switch (action.type) {\r\n        case constants.FETCH_ALL_SUB_TODO:\r\n            return action.payload;\r\n        case constants.CREATE_SUB_TODO:\r\n            return state.concat(action.payload);\r\n        case constants.DELETE_SUB_TODO:\r\n            return state.filter(item => item.id !== action.payload);\r\n        case constants.UPDATE_SUB_TODO:\r\n            return state.map(item => {\r\n                if (item.id === action.payload.todoCategoryID)\r\n                    return { ...item, ...action.payload.data};\r\n                else \r\n                    return item;\r\n            })\r\n        case constants.RESET_USER_INFO  :\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}