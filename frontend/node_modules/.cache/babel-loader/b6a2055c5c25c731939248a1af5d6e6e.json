{"ast":null,"code":"import axios from 'axios';\nimport * as constants from './constant';\nimport { logOutUser, logoutUser } from './actions/authAction';\nexport const apiMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  if (action.type !== constants.API) return next(action);\n  dispatch({\n    type: constants.LOADER\n  });\n  const BASE_URL = 'http://localhost:5000';\n  const AUTH_TOKEN = getState().user.token;\n  if (AUTH_TOKEN) axios.defaults.headers.common['Authorization'] = `Bearer ${AUTH_TOKEN}`;\n  const {\n    url,\n    method,\n    success,\n    data,\n    postProcessSuccess,\n    postProcessError\n  } = action.payload;\n  axios({\n    method,\n    url: BASE_URL + url,\n    data: data ? data : null\n  }).then(response => {\n    dispatch({\n      type: constants.LOADER\n    });\n    if (success) dispatch(success(response.data));\n    if (postProcessSuccess) postProcessSuccess(response.data);\n  }).catch(error => {\n    dispatch({\n      type: constants.LOADER\n    });\n    if (!error.response) console.warn(err);else {\n      if (error.response && error.response.status === 403) dispatch(logOutUser());\n\n      if (error.response.data.error.message) {\n        if (postProcessError) postProcessError(error.response.data.error.message);\n      }\n    }\n  });\n};","map":{"version":3,"sources":["E:/file project/OJT/TodoNew-Frontend/frontend/src/Redux/middleware.js"],"names":["axios","constants","logOutUser","logoutUser","apiMiddleware","dispatch","getState","next","action","type","API","LOADER","BASE_URL","AUTH_TOKEN","user","token","defaults","headers","common","url","method","success","data","postProcessSuccess","postProcessError","payload","then","response","catch","error","console","warn","err","status","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,SAAQC,UAAR,EAAoBC,UAApB,QAAqC,sBAArC;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAAD,KAA0BC,IAAI,IAAIC,MAAM,IAAI;AACrE,MAAIA,MAAM,CAACC,IAAP,KAAgBR,SAAS,CAACS,GAA9B,EAAmC,OAAOH,IAAI,CAACC,MAAD,CAAX;AAEnCH,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAER,SAAS,CAACU;AAAlB,GAAD,CAAR;AACA,QAAOC,QAAQ,GAAG,uBAAlB;AACA,QAAMC,UAAU,GAAGP,QAAQ,GAAGQ,IAAX,CAAgBC,KAAnC;AAEA,MAAGF,UAAH,EACIb,KAAK,CAACgB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASL,UAAW,EAAtE;AACJ,QAAM;AAAEM,IAAAA,GAAF;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA,kBAA9B;AAAkDC,IAAAA;AAAlD,MACNhB,MAAM,CAACiB,OADP;AAGAzB,EAAAA,KAAK,CAAC;AACFoB,IAAAA,MADE;AAEFD,IAAAA,GAAG,EAAEP,QAAQ,GAAGO,GAFd;AAGFG,IAAAA,IAAI,EAAEA,IAAI,GAAGA,IAAH,GAAU;AAHlB,GAAD,CAAL,CAIGI,IAJH,CAISC,QAAD,IAAc;AAClBtB,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAER,SAAS,CAACU;AAAlB,KAAD,CAAR;AACA,QAAGU,OAAH,EAAYhB,QAAQ,CAACgB,OAAO,CAACM,QAAQ,CAACL,IAAV,CAAR,CAAR;AACZ,QAAGC,kBAAH,EAAuBA,kBAAkB,CAACI,QAAQ,CAACL,IAAV,CAAlB;AAC1B,GARD,EAQGM,KARH,CAQSC,KAAK,IAAI;AACdxB,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAER,SAAS,CAACU;AAAlB,KAAD,CAAR;AACA,QAAG,CAACkB,KAAK,CAACF,QAAV,EAAoBG,OAAO,CAACC,IAAR,CAAaC,GAAb,EAApB,KACI;AACA,UAAIH,KAAK,CAACF,QAAN,IAAkBE,KAAK,CAACF,QAAN,CAAeM,MAAf,KAA0B,GAAhD,EACI5B,QAAQ,CAACH,UAAU,EAAX,CAAR;;AACJ,UAAI2B,KAAK,CAACF,QAAN,CAAeL,IAAf,CAAoBO,KAApB,CAA0BK,OAA9B,EAAsC;AAClC,YAAGV,gBAAH,EAAqBA,gBAAgB,CAACK,KAAK,CAACF,QAAN,CAAeL,IAAf,CAAoBO,KAApB,CAA0BK,OAA3B,CAAhB;AACxB;AACJ;AACJ,GAlBD;AAmBH,CA/BM","sourcesContent":["import axios from 'axios';\r\n\r\nimport * as constants from './constant';\r\nimport {logOutUser, logoutUser} from './actions/authAction';\r\n\r\nexport const apiMiddleware = ({dispatch, getState}) => next => action => {\r\n    if (action.type !== constants.API) return next(action);\r\n\r\n    dispatch({ type: constants.LOADER})\r\n    const  BASE_URL = 'http://localhost:5000';\r\n    const AUTH_TOKEN = getState().user.token;\r\n    \r\n    if(AUTH_TOKEN)\r\n        axios.defaults.headers.common['Authorization'] = `Bearer ${AUTH_TOKEN}`;\r\n    const { url, method, success, data, postProcessSuccess, postProcessError} =\r\n    action.payload;\r\n\r\n    axios({\r\n        method, \r\n        url: BASE_URL + url, \r\n        data: data ? data : null \r\n    }).then((response) => {\r\n        dispatch({ type: constants.LOADER})\r\n        if(success) dispatch(success(response.data));\r\n        if(postProcessSuccess) postProcessSuccess(response.data);\r\n    }).catch(error => {\r\n        dispatch({ type: constants.LOADER})\r\n        if(!error.response) console.warn(err);\r\n        else{\r\n            if (error.response && error.response.status === 403)\r\n                dispatch(logOutUser());\r\n            if (error.response.data.error.message){\r\n                if(postProcessError) postProcessError(error.response.data.error.message);\r\n            }\r\n        }\r\n    })\r\n};"]},"metadata":{},"sourceType":"module"}