{"ast":null,"code":"var _jsxFileName = \"E:\\\\file project\\\\OJT\\\\TodoNew-Frontend\\\\FrontEnd-Todo\\\\frontend\\\\src\\\\components\\\\subList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { getCategoryById } from \"../Redux/actions/subTodoAction\";\nimport { getCategoryId } from '../Redux/actions/todolistAction';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ShowSubList = ({\n  dispatchGetTodoIdAction,\n  match\n}) => {\n  _s();\n\n  const [categoryTitle, setCategoryTitle] = useState(\"\");\n  console.log(match);\n  useEffect(() => {\n    console.log(match.params);\n    const {\n      id\n    } = match.params;\n\n    if (id) {\n      dispatchGetTodoIdAction(id, ({\n        categoryTitle\n      }) => {\n        setCategoryTitle(categoryTitle);\n      });\n    }\n  }, [dispatchGetTodoIdAction, match.params]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      noValidate: true,\n      id: \"categoryTitle\",\n      type: \"text\",\n      name: \"categoryTitle\",\n      value: categoryTitle,\n      onChange: e => setCategoryTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ShowSubList, \"H/f5dYjihfZHq3IiTzv2qcnyntc=\");\n\n_c = ShowSubList;\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchGetTodoIdAction: (todoCategoryID, onSuccess) => dispatch(getCategoryId(todoCategoryID, onSuccess)),\n  dispatchGetSubTodoAction: (id, onSuccess) => dispatch(getCategoryById(id, onSuccess))\n});\n\nexport default connect(mapDispatchToProps)(ShowSubList);\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowSubList\");","map":{"version":3,"sources":["E:/file project/OJT/TodoNew-Frontend/FrontEnd-Todo/frontend/src/components/subList.js"],"names":["React","useEffect","useState","getCategoryById","getCategoryId","connect","ShowSubList","dispatchGetTodoIdAction","match","categoryTitle","setCategoryTitle","console","log","params","id","e","target","value","mapDispatchToProps","dispatch","todoCategoryID","onSuccess","dispatchGetSubTodoAction"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,eAAT,QAA+B,gCAA/B;AACA,SAAQC,aAAR,QAA4B,iCAA5B;AACA,SAAQC,OAAR,QAAsB,aAAtB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,uBAAD;AAA0BC,EAAAA;AAA1B,CAAD,KAAsC;AAAA;;AAEtD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AAEAS,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAEAP,EAAAA,SAAS,CAAC,MAAK;AACXU,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,MAAlB;AACA,UAAM;AAACC,MAAAA;AAAD,QAAON,KAAK,CAACK,MAAnB;;AACA,QAAGC,EAAH,EAAM;AACJP,MAAAA,uBAAuB,CAACO,EAAD,EAAK,CAAC;AAACL,QAAAA;AAAD,OAAD,KAC5B;AACEC,QAAAA,gBAAgB,CAACD,aAAD,CAAhB;AACD,OAHsB,CAAvB;AAID;AACF,GATM,EASJ,CAACF,uBAAD,EAA0BC,KAAK,CAACK,MAAhC,CATI,CAAT;AAWA,sBACI;AAAA,2BACI;AACI,MAAA,UAAU,MADd;AAEK,MAAA,EAAE,EAAC,eAFR;AAGK,MAAA,IAAI,EAAC,MAHV;AAIK,MAAA,IAAI,EAAC,eAJV;AAKK,MAAA,KAAK,EAAEJ,aALZ;AAMK,MAAA,QAAQ,EAAGM,CAAD,IAAOL,gBAAgB,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV;AANtC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CA7BD;;GAAMX,W;;KAAAA,W;;AAgCN,MAAMY,kBAAkB,GAAIC,QAAD,KAAe;AACtCZ,EAAAA,uBAAuB,EAAE,CAACa,cAAD,EAAiBC,SAAjB,KACrBF,QAAQ,CAACf,aAAa,CAACgB,cAAD,EAAiBC,SAAjB,CAAd,CAF0B;AAItCC,EAAAA,wBAAwB,EAAE,CAACR,EAAD,EAAKO,SAAL,KACtBF,QAAQ,CAAChB,eAAe,CAACW,EAAD,EAAKO,SAAL,CAAhB;AAL0B,CAAf,CAA3B;;AASA,eAAehB,OAAO,CAACa,kBAAD,CAAP,CAA4BZ,WAA5B,CAAf","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { getCategoryById} from \"../Redux/actions/subTodoAction\";\r\nimport {getCategoryId} from '../Redux/actions/todolistAction'\r\nimport {connect} from 'react-redux'\r\n\r\nconst ShowSubList = ({dispatchGetTodoIdAction, match}) => {\r\n\r\n    const [categoryTitle, setCategoryTitle] = useState(\"\");\r\n\r\n    console.log(match);\r\n\r\n    useEffect(()=> {\r\n        console.log(match.params);\r\n        const {id} = match.params;\r\n        if(id){\r\n          dispatchGetTodoIdAction(id, ({categoryTitle}) =>\r\n          {\r\n            setCategoryTitle(categoryTitle);\r\n          });\r\n        }\r\n      }, [dispatchGetTodoIdAction, match.params])\r\n\r\n    return (\r\n        <div >\r\n            <input\r\n                noValidate\r\n                 id=\"categoryTitle\"\r\n                 type=\"text\"\r\n                 name=\"categoryTitle\"\r\n                 value={categoryTitle}\r\n                 onChange={(e) => setCategoryTitle(e.target.value)}\r\n            /> \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    dispatchGetTodoIdAction: (todoCategoryID, onSuccess) => \r\n        dispatch(getCategoryId(todoCategoryID, onSuccess)),\r\n\r\n    dispatchGetSubTodoAction: (id, onSuccess) => \r\n        dispatch(getCategoryById(id, onSuccess))\r\n}) \r\n\r\n\r\nexport default connect(mapDispatchToProps)(ShowSubList)"]},"metadata":{},"sourceType":"module"}