{"ast":null,"code":"import * as constants from '../constant';\nexport default function todolistReducers(state = [], action) {\n  switch (action.type) {\n    case constants.FETCH_ALL_TODO:\n      return action.payload;\n\n    case constants.CREATE_TODO:\n      return state.concat(action.payload);\n\n    case constants.DELETE_TODO:\n      return state.filter(item => item._id !== action.payload);\n\n    case constants.UPDATE_TODO:\n      return state.map(item => {\n        if (item._id === action.payload.todoCategoryId) return { ...item,\n          ...action.payload.data\n        };else return item;\n      });\n\n    case constants.RESET_USER_INFO:\n      return [];\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["E:/file project/OJT/TodoNew-Frontend/frontend/src/Redux/reducers/todolistReducer.js"],"names":["constants","todolistReducers","state","action","type","FETCH_ALL_TODO","payload","CREATE_TODO","concat","DELETE_TODO","filter","item","_id","UPDATE_TODO","map","todoCategoryId","data","RESET_USER_INFO"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AAGA,eAAe,SAASC,gBAAT,CAA0BC,KAAK,GAAG,EAAlC,EAAsCC,MAAtC,EAA8C;AACzD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKJ,SAAS,CAACK,cAAf;AACI,aAAOF,MAAM,CAACG,OAAd;;AACJ,SAAKN,SAAS,CAACO,WAAf;AACI,aAAOL,KAAK,CAACM,MAAN,CAAaL,MAAM,CAACG,OAApB,CAAP;;AACJ,SAAKN,SAAS,CAACS,WAAf;AACI,aAAOP,KAAK,CAACQ,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaT,MAAM,CAACG,OAAzC,CAAP;;AACJ,SAAKN,SAAS,CAACa,WAAf;AACI,aAAOX,KAAK,CAACY,GAAN,CAAUH,IAAI,IAAI;AACrB,YAAIA,IAAI,CAACC,GAAL,KAAaT,MAAM,CAACG,OAAP,CAAeS,cAAhC,EACI,OAAO,EAAE,GAAGJ,IAAL;AAAW,aAAGR,MAAM,CAACG,OAAP,CAAeU;AAA7B,SAAP,CADJ,KAGI,OAAOL,IAAP;AACP,OALM,CAAP;;AAMJ,SAAKX,SAAS,CAACiB,eAAf;AACI,aAAO,EAAP;;AACJ;AACI,aAAOf,KAAP;AAjBR;AAmBH","sourcesContent":["import * as constants from '../constant'\r\n\r\n\r\nexport default function todolistReducers(state = [], action) {\r\n    switch(action.type) {\r\n        case constants.FETCH_ALL_TODO: \r\n            return action.payload;\r\n        case constants.CREATE_TODO:\r\n            return state.concat(action.payload);\r\n        case constants.DELETE_TODO: \r\n            return state.filter(item => item._id !== action.payload);\r\n        case constants.UPDATE_TODO: \r\n            return state.map(item => {\r\n                if (item._id === action.payload.todoCategoryId)\r\n                    return { ...item, ...action.payload.data};\r\n                else \r\n                    return item;\r\n            });\r\n        case constants.RESET_USER_INFO:\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}